class Student:
    from enrollment import Enrollment
    from course import Course
    #took out enrollment list and instructor
    def __init__(self, name, grad_year, gpa):
        self.name = name
        self.grad_year = grad_year
        self.gpa = gpa

        self.enrollment_list = []

        @property
        def enrollment_list(self):
            return self._enrollment_list

        @property
        def name(self):
            return self._name
        
        @name.setter
        def name(self, full_name):
            #splitting into first and last name
            #! does this not split if there's no space
            #! what if they pass only one letter? valueerror doesn't do anything
            names = full_name.split(' ')

            if len(names) < 2:
                raise ValueError("Name must contain a first name and a last name.")

            self._name = name
        
        @property
        def gpa(self):
            return self._gpa
        
        @gpa.setter
        def gpa(self, gpa):
            GPA_IN_RANGE = (0 <= gpa <= 4)
            if GPA_IN_RANGE:
                self._gpa = gpa
            else:
                raise Exception("GPA must be a number between 0 and 4")
            
        @property
        def grad_year(self):
            return self._grad_year
        
        @grad_year.setter
        def grad_year(self, grad_year):
            if grad_year >= 2024:
                self._grad_year = grad_year
            else:
                raise Exception("Grad year must be 2024 or later")
            
        @property
        def enrollment_list(self):
            return self._enrollment_list
        @enrollment_list.setter
        def enrollment_list(self, enrollment_list):
            if hasattr(self, "enrollment_list"):
                raise Exception("I can't reassign enrollment_list")
            self._enrollment_list = enrollment_list
        

        def count_instructors(self):

            #extracting unique instructors:
            instructors = set(item.get("instructor") for item in self._enrollment_list if item.get("instructor"))

            #!Conditional Check (if item.get("instructor")): The conditional check ensures that only items with a non-empty "instructor" key are considered. This is done to avoid None values or empty strings being added to the set.

            #Expression (item.get("instructor")): This extracts the value associated with the key "instructor" from each dictionary (item). The get method is used to safely retrieve the value without raising a KeyError if the key is not present.

            #!Set Construction (set(...)): The set() function is used to create a set from the iterable generated by the list comprehension. A set is an unordered collection of unique elements, so duplicate values are automatically eliminated.

            return len(instructors)

s = Student("Maddie Weber", 2024, 4.0)
print(s.name)
            
        
        
        
